@page "/fetchdata"
@inject HttpClient Http
@inject WeatherForecastService WeatherForecastService

<PageTitle>Weather forecast</PageTitle>

<h1>My Shared Weather forecast</h1>

<p>This component demonstrates fetching data from the server: <b>@serverName</b> </p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h3>Forecasts by remote web API</h3>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}
@if (!String.IsNullOrEmpty(msgError))
{
    <div class="alert alert-danger">@msgError</div>
}

@code {
    private WeatherForecast[]? forecasts;

    private string? serverName ;
    private string? msgError;

    protected override async Task OnInitializedAsync()
    {
        //forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("./_content/Blazor.SharedUI.RCL/sample-data/weather.json");
        //forecasts2 = await WeatherForecastService.GetForecastAsync(DateTime.Now);

        serverName = Http.BaseAddress?.AbsoluteUri;
        try
        {
            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("/weatherforecast");
        }
        catch (Exception ex)
        {
            msgError = ex.Message;
        }
       

        
    }

    
}
